/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "https://esm.sh/ethers@6.7.0";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.ts";

export interface TicketsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buy"
      | "calculateAdditionalTokenOwnerFee"
      | "changeTicketOwner"
      | "changeTicketType"
      | "claimHolderFee"
      | "claimableHolderFee"
      | "createTicket"
      | "creatorFeePercent"
      | "deleteTicket"
      | "endCreatorTradeMigration"
      | "exists"
      | "getBuyPrice"
      | "getBuyPriceAfterFee"
      | "getPrice"
      | "getSellPrice"
      | "getSellPriceAfterFee"
      | "groupHolderFeePercent"
      | "holders"
      | "hybridHolderFeePercent"
      | "hybridOwnerFeePercent"
      | "initialize"
      | "migrateFromCreatorTrade"
      | "migratedFromCreatorTrade"
      | "nextId"
      | "oracleAddress"
      | "owner"
      | "protocolFeeDestination"
      | "protocolFeePercent"
      | "renounceOwnership"
      | "sell"
      | "setCreatorFeePercent"
      | "setGroupHolderFeePercent"
      | "setHybridHolderFeePercent"
      | "setHybridOwnerFeePercent"
      | "setOracleAddress"
      | "setProtocolFeeDestination"
      | "setProtocolFeePercent"
      | "tickets"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangeTicketOwner"
      | "ChangeTicketType"
      | "ClaimHolderFee"
      | "EndCreatorTradeMigration"
      | "Initialized"
      | "MigrateCreatorHolder"
      | "OwnershipTransferred"
      | "SetCreatorFeePercent"
      | "SetGroupHolderFeePercent"
      | "SetHybridHolderFeePercent"
      | "SetHybridOwnerFeePercent"
      | "SetOracleAddress"
      | "SetProtocolFeeDestination"
      | "SetProtocolFeePercent"
      | "TicketCreated"
      | "TicketDeleted"
      | "Trade"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAdditionalTokenOwnerFee",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTicketOwner",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTicketType",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimHolderFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableHolderFee",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endCreatorTradeMigration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPriceAfterFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPriceAfterFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "groupHolderFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "holders",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hybridHolderFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hybridOwnerFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateFromCreatorTrade",
    values: [AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "migratedFromCreatorTrade",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nextId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFeeDestination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreatorFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGroupHolderFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHybridHolderFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHybridOwnerFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeDestination",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateAdditionalTokenOwnerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTicketOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTicketType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimHolderFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableHolderFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endCreatorTradeMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPriceAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellPriceAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "groupHolderFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "holders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hybridHolderFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hybridOwnerFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateFromCreatorTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migratedFromCreatorTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCreatorFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGroupHolderFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHybridHolderFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHybridOwnerFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ChangeTicketOwnerEvent {
  export type InputTuple = [
    id: BigNumberish,
    oldOwner: AddressLike,
    newOwner: AddressLike
  ];
  export type OutputTuple = [id: bigint, oldOwner: string, newOwner: string];
  export interface OutputObject {
    id: bigint;
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeTicketTypeEvent {
  export type InputTuple = [id: BigNumberish, ticketType: BigNumberish];
  export type OutputTuple = [id: bigint, ticketType: bigint];
  export interface OutputObject {
    id: bigint;
    ticketType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimHolderFeeEvent {
  export type InputTuple = [
    holder: AddressLike,
    id: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [holder: string, id: bigint, fee: bigint];
  export interface OutputObject {
    holder: string;
    id: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EndCreatorTradeMigrationEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MigrateCreatorHolderEvent {
  export type InputTuple = [
    id: BigNumberish,
    holder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: bigint, holder: string, amount: bigint];
  export interface OutputObject {
    id: bigint;
    holder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetCreatorFeePercentEvent {
  export type InputTuple = [percent: BigNumberish];
  export type OutputTuple = [percent: bigint];
  export interface OutputObject {
    percent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetGroupHolderFeePercentEvent {
  export type InputTuple = [percent: BigNumberish];
  export type OutputTuple = [percent: bigint];
  export interface OutputObject {
    percent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetHybridHolderFeePercentEvent {
  export type InputTuple = [percent: BigNumberish];
  export type OutputTuple = [percent: bigint];
  export interface OutputObject {
    percent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetHybridOwnerFeePercentEvent {
  export type InputTuple = [percent: BigNumberish];
  export type OutputTuple = [percent: bigint];
  export interface OutputObject {
    percent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetOracleAddressEvent {
  export type InputTuple = [oracle: AddressLike];
  export type OutputTuple = [oracle: string];
  export interface OutputObject {
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetProtocolFeeDestinationEvent {
  export type InputTuple = [destination: AddressLike];
  export type OutputTuple = [destination: string];
  export interface OutputObject {
    destination: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetProtocolFeePercentEvent {
  export type InputTuple = [percent: BigNumberish];
  export type OutputTuple = [percent: bigint];
  export interface OutputObject {
    percent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    owner: AddressLike,
    ticketType: BigNumberish
  ];
  export type OutputTuple = [id: bigint, owner: string, ticketType: bigint];
  export interface OutputObject {
    id: bigint;
    owner: string;
    ticketType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketDeletedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeEvent {
  export type InputTuple = [
    trader: AddressLike,
    id: BigNumberish,
    isBuy: boolean,
    amount: BigNumberish,
    price: BigNumberish,
    protocolFee: BigNumberish,
    ownerFee: BigNumberish,
    holderFee: BigNumberish,
    additionalFee: BigNumberish,
    supply: BigNumberish
  ];
  export type OutputTuple = [
    trader: string,
    id: bigint,
    isBuy: boolean,
    amount: bigint,
    price: bigint,
    protocolFee: bigint,
    ownerFee: bigint,
    holderFee: bigint,
    additionalFee: bigint,
    supply: bigint
  ];
  export interface OutputObject {
    trader: string;
    id: bigint;
    isBuy: boolean;
    amount: bigint;
    price: bigint;
    protocolFee: bigint;
    ownerFee: bigint;
    holderFee: bigint;
    additionalFee: bigint;
    supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Tickets extends BaseContract {
  connect(runner?: ContractRunner | null): Tickets;
  waitForDeployment(): Promise<this>;

  interface: TicketsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buy: TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish, oracleSignature: BytesLike],
    [void],
    "payable"
  >;

  calculateAdditionalTokenOwnerFee: TypedContractMethod<
    [price: BigNumberish, oracleSignature: BytesLike],
    [bigint],
    "view"
  >;

  changeTicketOwner: TypedContractMethod<
    [id: BigNumberish, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  changeTicketType: TypedContractMethod<
    [id: BigNumberish, ticketType: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimHolderFee: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  claimableHolderFee: TypedContractMethod<
    [id: BigNumberish, holder: AddressLike],
    [bigint],
    "view"
  >;

  createTicket: TypedContractMethod<
    [ticketType: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  creatorFeePercent: TypedContractMethod<[], [bigint], "view">;

  deleteTicket: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  endCreatorTradeMigration: TypedContractMethod<[], [void], "nonpayable">;

  exists: TypedContractMethod<[id: BigNumberish], [boolean], "view">;

  getBuyPrice: TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getBuyPriceAfterFee: TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getPrice: TypedContractMethod<
    [supply: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getSellPrice: TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getSellPriceAfterFee: TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  groupHolderFeePercent: TypedContractMethod<[], [bigint], "view">;

  holders: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, bigint] & { balance: bigint; feeDebt: bigint }],
    "view"
  >;

  hybridHolderFeePercent: TypedContractMethod<[], [bigint], "view">;

  hybridOwnerFeePercent: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _baseDivider: BigNumberish,
      _protocolFeeDestination: AddressLike,
      _protocolFeePercent: BigNumberish,
      _creatorFeePercent: BigNumberish,
      _groupHolderFeePercent: BigNumberish,
      _hybridOwnerFeePercent: BigNumberish,
      _hybridHolderFeePercent: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  migrateFromCreatorTrade: TypedContractMethod<
    [
      creator: AddressLike,
      creatorHolders: AddressLike[],
      amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  migratedFromCreatorTrade: TypedContractMethod<[], [boolean], "view">;

  nextId: TypedContractMethod<[], [bigint], "view">;

  oracleAddress: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  protocolFeeDestination: TypedContractMethod<[], [string], "view">;

  protocolFeePercent: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sell: TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish, oracleSignature: BytesLike],
    [void],
    "nonpayable"
  >;

  setCreatorFeePercent: TypedContractMethod<
    [_feePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setGroupHolderFeePercent: TypedContractMethod<
    [_feePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setHybridHolderFeePercent: TypedContractMethod<
    [_feePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setHybridOwnerFeePercent: TypedContractMethod<
    [_feePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOracleAddress: TypedContractMethod<
    [_oracle: AddressLike],
    [void],
    "nonpayable"
  >;

  setProtocolFeeDestination: TypedContractMethod<
    [_feeDestination: AddressLike],
    [void],
    "nonpayable"
  >;

  setProtocolFeePercent: TypedContractMethod<
    [_feePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  tickets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        ticketType: bigint;
        owner: string;
        supply: bigint;
        accFeePerUnit: bigint;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish, oracleSignature: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "calculateAdditionalTokenOwnerFee"
  ): TypedContractMethod<
    [price: BigNumberish, oracleSignature: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "changeTicketOwner"
  ): TypedContractMethod<
    [id: BigNumberish, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeTicketType"
  ): TypedContractMethod<
    [id: BigNumberish, ticketType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimHolderFee"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimableHolderFee"
  ): TypedContractMethod<
    [id: BigNumberish, holder: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createTicket"
  ): TypedContractMethod<[ticketType: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "creatorFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deleteTicket"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endCreatorTradeMigration"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[id: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "getBuyPrice"
  ): TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBuyPriceAfterFee"
  ): TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [supply: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSellPrice"
  ): TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSellPriceAfterFee"
  ): TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "groupHolderFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "holders"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, bigint] & { balance: bigint; feeDebt: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "hybridHolderFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hybridOwnerFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _baseDivider: BigNumberish,
      _protocolFeeDestination: AddressLike,
      _protocolFeePercent: BigNumberish,
      _creatorFeePercent: BigNumberish,
      _groupHolderFeePercent: BigNumberish,
      _hybridOwnerFeePercent: BigNumberish,
      _hybridHolderFeePercent: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "migrateFromCreatorTrade"
  ): TypedContractMethod<
    [
      creator: AddressLike,
      creatorHolders: AddressLike[],
      amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "migratedFromCreatorTrade"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracleAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFeeDestination"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sell"
  ): TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish, oracleSignature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCreatorFeePercent"
  ): TypedContractMethod<[_feePercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGroupHolderFeePercent"
  ): TypedContractMethod<[_feePercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHybridHolderFeePercent"
  ): TypedContractMethod<[_feePercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHybridOwnerFeePercent"
  ): TypedContractMethod<[_feePercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOracleAddress"
  ): TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFeeDestination"
  ): TypedContractMethod<[_feeDestination: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFeePercent"
  ): TypedContractMethod<[_feePercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tickets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        ticketType: bigint;
        owner: string;
        supply: bigint;
        accFeePerUnit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ChangeTicketOwner"
  ): TypedContractEvent<
    ChangeTicketOwnerEvent.InputTuple,
    ChangeTicketOwnerEvent.OutputTuple,
    ChangeTicketOwnerEvent.OutputObject
  >;
  getEvent(
    key: "ChangeTicketType"
  ): TypedContractEvent<
    ChangeTicketTypeEvent.InputTuple,
    ChangeTicketTypeEvent.OutputTuple,
    ChangeTicketTypeEvent.OutputObject
  >;
  getEvent(
    key: "ClaimHolderFee"
  ): TypedContractEvent<
    ClaimHolderFeeEvent.InputTuple,
    ClaimHolderFeeEvent.OutputTuple,
    ClaimHolderFeeEvent.OutputObject
  >;
  getEvent(
    key: "EndCreatorTradeMigration"
  ): TypedContractEvent<
    EndCreatorTradeMigrationEvent.InputTuple,
    EndCreatorTradeMigrationEvent.OutputTuple,
    EndCreatorTradeMigrationEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MigrateCreatorHolder"
  ): TypedContractEvent<
    MigrateCreatorHolderEvent.InputTuple,
    MigrateCreatorHolderEvent.OutputTuple,
    MigrateCreatorHolderEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetCreatorFeePercent"
  ): TypedContractEvent<
    SetCreatorFeePercentEvent.InputTuple,
    SetCreatorFeePercentEvent.OutputTuple,
    SetCreatorFeePercentEvent.OutputObject
  >;
  getEvent(
    key: "SetGroupHolderFeePercent"
  ): TypedContractEvent<
    SetGroupHolderFeePercentEvent.InputTuple,
    SetGroupHolderFeePercentEvent.OutputTuple,
    SetGroupHolderFeePercentEvent.OutputObject
  >;
  getEvent(
    key: "SetHybridHolderFeePercent"
  ): TypedContractEvent<
    SetHybridHolderFeePercentEvent.InputTuple,
    SetHybridHolderFeePercentEvent.OutputTuple,
    SetHybridHolderFeePercentEvent.OutputObject
  >;
  getEvent(
    key: "SetHybridOwnerFeePercent"
  ): TypedContractEvent<
    SetHybridOwnerFeePercentEvent.InputTuple,
    SetHybridOwnerFeePercentEvent.OutputTuple,
    SetHybridOwnerFeePercentEvent.OutputObject
  >;
  getEvent(
    key: "SetOracleAddress"
  ): TypedContractEvent<
    SetOracleAddressEvent.InputTuple,
    SetOracleAddressEvent.OutputTuple,
    SetOracleAddressEvent.OutputObject
  >;
  getEvent(
    key: "SetProtocolFeeDestination"
  ): TypedContractEvent<
    SetProtocolFeeDestinationEvent.InputTuple,
    SetProtocolFeeDestinationEvent.OutputTuple,
    SetProtocolFeeDestinationEvent.OutputObject
  >;
  getEvent(
    key: "SetProtocolFeePercent"
  ): TypedContractEvent<
    SetProtocolFeePercentEvent.InputTuple,
    SetProtocolFeePercentEvent.OutputTuple,
    SetProtocolFeePercentEvent.OutputObject
  >;
  getEvent(
    key: "TicketCreated"
  ): TypedContractEvent<
    TicketCreatedEvent.InputTuple,
    TicketCreatedEvent.OutputTuple,
    TicketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TicketDeleted"
  ): TypedContractEvent<
    TicketDeletedEvent.InputTuple,
    TicketDeletedEvent.OutputTuple,
    TicketDeletedEvent.OutputObject
  >;
  getEvent(
    key: "Trade"
  ): TypedContractEvent<
    TradeEvent.InputTuple,
    TradeEvent.OutputTuple,
    TradeEvent.OutputObject
  >;

  filters: {
    "ChangeTicketOwner(uint256,address,address)": TypedContractEvent<
      ChangeTicketOwnerEvent.InputTuple,
      ChangeTicketOwnerEvent.OutputTuple,
      ChangeTicketOwnerEvent.OutputObject
    >;
    ChangeTicketOwner: TypedContractEvent<
      ChangeTicketOwnerEvent.InputTuple,
      ChangeTicketOwnerEvent.OutputTuple,
      ChangeTicketOwnerEvent.OutputObject
    >;

    "ChangeTicketType(uint256,uint8)": TypedContractEvent<
      ChangeTicketTypeEvent.InputTuple,
      ChangeTicketTypeEvent.OutputTuple,
      ChangeTicketTypeEvent.OutputObject
    >;
    ChangeTicketType: TypedContractEvent<
      ChangeTicketTypeEvent.InputTuple,
      ChangeTicketTypeEvent.OutputTuple,
      ChangeTicketTypeEvent.OutputObject
    >;

    "ClaimHolderFee(address,uint256,uint256)": TypedContractEvent<
      ClaimHolderFeeEvent.InputTuple,
      ClaimHolderFeeEvent.OutputTuple,
      ClaimHolderFeeEvent.OutputObject
    >;
    ClaimHolderFee: TypedContractEvent<
      ClaimHolderFeeEvent.InputTuple,
      ClaimHolderFeeEvent.OutputTuple,
      ClaimHolderFeeEvent.OutputObject
    >;

    "EndCreatorTradeMigration()": TypedContractEvent<
      EndCreatorTradeMigrationEvent.InputTuple,
      EndCreatorTradeMigrationEvent.OutputTuple,
      EndCreatorTradeMigrationEvent.OutputObject
    >;
    EndCreatorTradeMigration: TypedContractEvent<
      EndCreatorTradeMigrationEvent.InputTuple,
      EndCreatorTradeMigrationEvent.OutputTuple,
      EndCreatorTradeMigrationEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MigrateCreatorHolder(uint256,address,uint256)": TypedContractEvent<
      MigrateCreatorHolderEvent.InputTuple,
      MigrateCreatorHolderEvent.OutputTuple,
      MigrateCreatorHolderEvent.OutputObject
    >;
    MigrateCreatorHolder: TypedContractEvent<
      MigrateCreatorHolderEvent.InputTuple,
      MigrateCreatorHolderEvent.OutputTuple,
      MigrateCreatorHolderEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetCreatorFeePercent(uint256)": TypedContractEvent<
      SetCreatorFeePercentEvent.InputTuple,
      SetCreatorFeePercentEvent.OutputTuple,
      SetCreatorFeePercentEvent.OutputObject
    >;
    SetCreatorFeePercent: TypedContractEvent<
      SetCreatorFeePercentEvent.InputTuple,
      SetCreatorFeePercentEvent.OutputTuple,
      SetCreatorFeePercentEvent.OutputObject
    >;

    "SetGroupHolderFeePercent(uint256)": TypedContractEvent<
      SetGroupHolderFeePercentEvent.InputTuple,
      SetGroupHolderFeePercentEvent.OutputTuple,
      SetGroupHolderFeePercentEvent.OutputObject
    >;
    SetGroupHolderFeePercent: TypedContractEvent<
      SetGroupHolderFeePercentEvent.InputTuple,
      SetGroupHolderFeePercentEvent.OutputTuple,
      SetGroupHolderFeePercentEvent.OutputObject
    >;

    "SetHybridHolderFeePercent(uint256)": TypedContractEvent<
      SetHybridHolderFeePercentEvent.InputTuple,
      SetHybridHolderFeePercentEvent.OutputTuple,
      SetHybridHolderFeePercentEvent.OutputObject
    >;
    SetHybridHolderFeePercent: TypedContractEvent<
      SetHybridHolderFeePercentEvent.InputTuple,
      SetHybridHolderFeePercentEvent.OutputTuple,
      SetHybridHolderFeePercentEvent.OutputObject
    >;

    "SetHybridOwnerFeePercent(uint256)": TypedContractEvent<
      SetHybridOwnerFeePercentEvent.InputTuple,
      SetHybridOwnerFeePercentEvent.OutputTuple,
      SetHybridOwnerFeePercentEvent.OutputObject
    >;
    SetHybridOwnerFeePercent: TypedContractEvent<
      SetHybridOwnerFeePercentEvent.InputTuple,
      SetHybridOwnerFeePercentEvent.OutputTuple,
      SetHybridOwnerFeePercentEvent.OutputObject
    >;

    "SetOracleAddress(address)": TypedContractEvent<
      SetOracleAddressEvent.InputTuple,
      SetOracleAddressEvent.OutputTuple,
      SetOracleAddressEvent.OutputObject
    >;
    SetOracleAddress: TypedContractEvent<
      SetOracleAddressEvent.InputTuple,
      SetOracleAddressEvent.OutputTuple,
      SetOracleAddressEvent.OutputObject
    >;

    "SetProtocolFeeDestination(address)": TypedContractEvent<
      SetProtocolFeeDestinationEvent.InputTuple,
      SetProtocolFeeDestinationEvent.OutputTuple,
      SetProtocolFeeDestinationEvent.OutputObject
    >;
    SetProtocolFeeDestination: TypedContractEvent<
      SetProtocolFeeDestinationEvent.InputTuple,
      SetProtocolFeeDestinationEvent.OutputTuple,
      SetProtocolFeeDestinationEvent.OutputObject
    >;

    "SetProtocolFeePercent(uint256)": TypedContractEvent<
      SetProtocolFeePercentEvent.InputTuple,
      SetProtocolFeePercentEvent.OutputTuple,
      SetProtocolFeePercentEvent.OutputObject
    >;
    SetProtocolFeePercent: TypedContractEvent<
      SetProtocolFeePercentEvent.InputTuple,
      SetProtocolFeePercentEvent.OutputTuple,
      SetProtocolFeePercentEvent.OutputObject
    >;

    "TicketCreated(uint256,address,uint8)": TypedContractEvent<
      TicketCreatedEvent.InputTuple,
      TicketCreatedEvent.OutputTuple,
      TicketCreatedEvent.OutputObject
    >;
    TicketCreated: TypedContractEvent<
      TicketCreatedEvent.InputTuple,
      TicketCreatedEvent.OutputTuple,
      TicketCreatedEvent.OutputObject
    >;

    "TicketDeleted(uint256)": TypedContractEvent<
      TicketDeletedEvent.InputTuple,
      TicketDeletedEvent.OutputTuple,
      TicketDeletedEvent.OutputObject
    >;
    TicketDeleted: TypedContractEvent<
      TicketDeletedEvent.InputTuple,
      TicketDeletedEvent.OutputTuple,
      TicketDeletedEvent.OutputObject
    >;

    "Trade(address,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
    Trade: TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
  };
}
