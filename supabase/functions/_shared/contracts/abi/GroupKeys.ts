/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "https://esm.sh/ethers@6.7.0";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.ts";

export interface GroupKeysInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchClaimHolderFees"
      | "batchClaimableHolderFees"
      | "buyKeys"
      | "claimHolderFee"
      | "claimableHolderFee"
      | "createGroup"
      | "existsGroup"
      | "getBuyPrice"
      | "getBuyPriceAfterFee"
      | "getPrice"
      | "getSellPrice"
      | "getSellPriceAfterFee"
      | "groups"
      | "holderFeePercent"
      | "holders"
      | "initialize"
      | "nextGroupId"
      | "owner"
      | "protocolFeeDestination"
      | "protocolFeePercent"
      | "renounceOwnership"
      | "sellKeys"
      | "setHolderFeePercent"
      | "setProtocolFeeDestination"
      | "setProtocolFeePercent"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimHolderFee"
      | "GroupCreated"
      | "Initialized"
      | "OwnershipTransferred"
      | "SetHolderFeePercent"
      | "SetProtocolFeeDestination"
      | "SetProtocolFeePercent"
      | "Trade"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchClaimHolderFees",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchClaimableHolderFees",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buyKeys",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimHolderFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableHolderFee",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createGroup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "existsGroup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPriceAfterFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPriceAfterFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "groups",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "holderFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "holders",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextGroupId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFeeDestination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellKeys",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHolderFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeDestination",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchClaimHolderFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchClaimableHolderFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimHolderFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableHolderFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "existsGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPriceAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellPriceAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "groups", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "holderFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "holders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextGroupId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHolderFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ClaimHolderFeeEvent {
  export type InputTuple = [
    holder: AddressLike,
    groupId: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [holder: string, groupId: bigint, fee: bigint];
  export interface OutputObject {
    holder: string;
    groupId: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GroupCreatedEvent {
  export type InputTuple = [groupId: BigNumberish, creator: AddressLike];
  export type OutputTuple = [groupId: bigint, creator: string];
  export interface OutputObject {
    groupId: bigint;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetHolderFeePercentEvent {
  export type InputTuple = [percent: BigNumberish];
  export type OutputTuple = [percent: bigint];
  export interface OutputObject {
    percent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetProtocolFeeDestinationEvent {
  export type InputTuple = [destination: AddressLike];
  export type OutputTuple = [destination: string];
  export interface OutputObject {
    destination: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetProtocolFeePercentEvent {
  export type InputTuple = [percent: BigNumberish];
  export type OutputTuple = [percent: bigint];
  export interface OutputObject {
    percent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeEvent {
  export type InputTuple = [
    trader: AddressLike,
    groupId: BigNumberish,
    isBuy: boolean,
    amount: BigNumberish,
    price: BigNumberish,
    protocolFee: BigNumberish,
    holderFee: BigNumberish,
    supply: BigNumberish
  ];
  export type OutputTuple = [
    trader: string,
    groupId: bigint,
    isBuy: boolean,
    amount: bigint,
    price: bigint,
    protocolFee: bigint,
    holderFee: bigint,
    supply: bigint
  ];
  export interface OutputObject {
    trader: string;
    groupId: bigint;
    isBuy: boolean;
    amount: bigint;
    price: bigint;
    protocolFee: bigint;
    holderFee: bigint;
    supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GroupKeys extends BaseContract {
  connect(runner?: ContractRunner | null): GroupKeys;
  waitForDeployment(): Promise<this>;

  interface: GroupKeysInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchClaimHolderFees: TypedContractMethod<
    [groupIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  batchClaimableHolderFees: TypedContractMethod<
    [groupId: BigNumberish, _holders: AddressLike[]],
    [bigint[]],
    "view"
  >;

  buyKeys: TypedContractMethod<
    [groupId: BigNumberish, amount: BigNumberish],
    [void],
    "payable"
  >;

  claimHolderFee: TypedContractMethod<
    [groupId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimableHolderFee: TypedContractMethod<
    [groupId: BigNumberish, holder: AddressLike],
    [bigint],
    "view"
  >;

  createGroup: TypedContractMethod<[], [void], "nonpayable">;

  existsGroup: TypedContractMethod<[groupId: BigNumberish], [boolean], "view">;

  getBuyPrice: TypedContractMethod<
    [groupId: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getBuyPriceAfterFee: TypedContractMethod<
    [groupId: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getPrice: TypedContractMethod<
    [supply: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getSellPrice: TypedContractMethod<
    [groupId: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getSellPriceAfterFee: TypedContractMethod<
    [groupId: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  groups: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { supply: bigint; accFeePerUnit: bigint }],
    "view"
  >;

  holderFeePercent: TypedContractMethod<[], [bigint], "view">;

  holders: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, bigint] & { balance: bigint; feeDebt: bigint }],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _baseDivider: BigNumberish,
      _protocolFeeDestination: AddressLike,
      _protocolFeePercent: BigNumberish,
      _holderFeePercent: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  nextGroupId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  protocolFeeDestination: TypedContractMethod<[], [string], "view">;

  protocolFeePercent: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sellKeys: TypedContractMethod<
    [groupId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setHolderFeePercent: TypedContractMethod<
    [_feePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolFeeDestination: TypedContractMethod<
    [_feeDestination: AddressLike],
    [void],
    "nonpayable"
  >;

  setProtocolFeePercent: TypedContractMethod<
    [_feePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchClaimHolderFees"
  ): TypedContractMethod<[groupIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "batchClaimableHolderFees"
  ): TypedContractMethod<
    [groupId: BigNumberish, _holders: AddressLike[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "buyKeys"
  ): TypedContractMethod<
    [groupId: BigNumberish, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimHolderFee"
  ): TypedContractMethod<[groupId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimableHolderFee"
  ): TypedContractMethod<
    [groupId: BigNumberish, holder: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createGroup"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "existsGroup"
  ): TypedContractMethod<[groupId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "getBuyPrice"
  ): TypedContractMethod<
    [groupId: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBuyPriceAfterFee"
  ): TypedContractMethod<
    [groupId: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [supply: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSellPrice"
  ): TypedContractMethod<
    [groupId: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSellPriceAfterFee"
  ): TypedContractMethod<
    [groupId: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "groups"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { supply: bigint; accFeePerUnit: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "holderFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "holders"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, bigint] & { balance: bigint; feeDebt: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _baseDivider: BigNumberish,
      _protocolFeeDestination: AddressLike,
      _protocolFeePercent: BigNumberish,
      _holderFeePercent: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextGroupId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFeeDestination"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellKeys"
  ): TypedContractMethod<
    [groupId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHolderFeePercent"
  ): TypedContractMethod<[_feePercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFeeDestination"
  ): TypedContractMethod<[_feeDestination: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFeePercent"
  ): TypedContractMethod<[_feePercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ClaimHolderFee"
  ): TypedContractEvent<
    ClaimHolderFeeEvent.InputTuple,
    ClaimHolderFeeEvent.OutputTuple,
    ClaimHolderFeeEvent.OutputObject
  >;
  getEvent(
    key: "GroupCreated"
  ): TypedContractEvent<
    GroupCreatedEvent.InputTuple,
    GroupCreatedEvent.OutputTuple,
    GroupCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetHolderFeePercent"
  ): TypedContractEvent<
    SetHolderFeePercentEvent.InputTuple,
    SetHolderFeePercentEvent.OutputTuple,
    SetHolderFeePercentEvent.OutputObject
  >;
  getEvent(
    key: "SetProtocolFeeDestination"
  ): TypedContractEvent<
    SetProtocolFeeDestinationEvent.InputTuple,
    SetProtocolFeeDestinationEvent.OutputTuple,
    SetProtocolFeeDestinationEvent.OutputObject
  >;
  getEvent(
    key: "SetProtocolFeePercent"
  ): TypedContractEvent<
    SetProtocolFeePercentEvent.InputTuple,
    SetProtocolFeePercentEvent.OutputTuple,
    SetProtocolFeePercentEvent.OutputObject
  >;
  getEvent(
    key: "Trade"
  ): TypedContractEvent<
    TradeEvent.InputTuple,
    TradeEvent.OutputTuple,
    TradeEvent.OutputObject
  >;

  filters: {
    "ClaimHolderFee(address,uint256,uint256)": TypedContractEvent<
      ClaimHolderFeeEvent.InputTuple,
      ClaimHolderFeeEvent.OutputTuple,
      ClaimHolderFeeEvent.OutputObject
    >;
    ClaimHolderFee: TypedContractEvent<
      ClaimHolderFeeEvent.InputTuple,
      ClaimHolderFeeEvent.OutputTuple,
      ClaimHolderFeeEvent.OutputObject
    >;

    "GroupCreated(uint256,address)": TypedContractEvent<
      GroupCreatedEvent.InputTuple,
      GroupCreatedEvent.OutputTuple,
      GroupCreatedEvent.OutputObject
    >;
    GroupCreated: TypedContractEvent<
      GroupCreatedEvent.InputTuple,
      GroupCreatedEvent.OutputTuple,
      GroupCreatedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetHolderFeePercent(uint256)": TypedContractEvent<
      SetHolderFeePercentEvent.InputTuple,
      SetHolderFeePercentEvent.OutputTuple,
      SetHolderFeePercentEvent.OutputObject
    >;
    SetHolderFeePercent: TypedContractEvent<
      SetHolderFeePercentEvent.InputTuple,
      SetHolderFeePercentEvent.OutputTuple,
      SetHolderFeePercentEvent.OutputObject
    >;

    "SetProtocolFeeDestination(address)": TypedContractEvent<
      SetProtocolFeeDestinationEvent.InputTuple,
      SetProtocolFeeDestinationEvent.OutputTuple,
      SetProtocolFeeDestinationEvent.OutputObject
    >;
    SetProtocolFeeDestination: TypedContractEvent<
      SetProtocolFeeDestinationEvent.InputTuple,
      SetProtocolFeeDestinationEvent.OutputTuple,
      SetProtocolFeeDestinationEvent.OutputObject
    >;

    "SetProtocolFeePercent(uint256)": TypedContractEvent<
      SetProtocolFeePercentEvent.InputTuple,
      SetProtocolFeePercentEvent.OutputTuple,
      SetProtocolFeePercentEvent.OutputObject
    >;
    SetProtocolFeePercent: TypedContractEvent<
      SetProtocolFeePercentEvent.InputTuple,
      SetProtocolFeePercentEvent.OutputTuple,
      SetProtocolFeePercentEvent.OutputObject
    >;

    "Trade(address,uint256,bool,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
    Trade: TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
  };
}
